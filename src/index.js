import { renderSVG } from './render-svg';
import { setupScene } from './setup-scene';
import * as THREE from 'three';
import { STLExporter } from 'three/examples/jsm/exporters/STLExporter';
import { saveAs } from 'file-saver';
import JSZip from 'jszip';

const exampleSvgData = `<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   version="1.0"
   width="188.97638"
   height="214.746"
   id="svg3"
   xml:space="preserve"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><defs
     id="defs3" /><path
     id="path1"
     d="m 94.355706,24.382583 c -3.76061,-0.0073 -7.48404,1.358558 -10.18272,4.120731 l -44.89664,45.942979 c -15.1694,18.78547 10.32347,16.59962 21.25185,22.01035 3.92018,4.007057 -15.02587,6.964707 -11.10569,10.975127 3.92018,4.00708 23.70485,7.72003 27.63172,11.7271 3.92018,4.00707 -8.02395,8.25788 -4.10377,12.26495 3.92018,4.00707 12.98691,0.21075 14.68466,9.46144 1.2098,6.6105 16.338914,2.84097 23.738134,-2.5731 3.92018,-4.01041 -7.49914,-3.63322 -3.57896,-7.64029 9.74865,-9.96923 18.82579,-3.62228 22.16111,-13.61155 1.64762,-4.93616 -14.35109,-7.60972 -10.42422,-11.61679 11.27929,-6.587107 50.2642,-10.875177 31.76616,-29.373217 L 104.75971,28.503314 c -2.84573,-2.732092 -6.643404,-4.113219 -10.404004,-4.120731 z m 0.40339,4.372035 c 2.68489,0.0142 5.360514,1.018875 7.287174,2.970615 l 17.76232,18.03973 c 1.68437,1.72113 1.6611,5.05647 0.71866,6.01564 l -8.8198,-7.0548 -1.73432,10.44707 -7.36877,-3.88967 -11.800854,7.45558 -3.90664,-15.71728 -6.34005,10.96862 h -9.69186 c -3.95026,0 -4.41503,-5.01313 -0.82571,-8.60244 6.26961,-6.76758 13.46509,-13.6654 17.37524,-17.66245 1.9651,-2.00855 4.65972,-2.984819 7.34461,-2.970615 z m -21.33083,70.188295 c 1.19978,0.74527 19.34701,4.431837 23.78187,5.167077 1.53732,0.32417 0.44782,1.90834 -1.67102,2.97779 -4.77908,1.26997 -27.95938,-8.144867 -22.11085,-8.144867 z m 70.559054,12.628527 c -3.65115,0.12574 -7.25086,1.99146 -8.24343,5.48888 0,2.27925 16.79365,3.77268 16.79365,-0.53852 -1.19644,-3.46232 -4.89907,-5.0761 -8.55022,-4.95036 z m -77.686304,9.88638 c -5.08911,0.27036 -10.55007,3.95283 -6.20754,7.71405 3.97699,3.43894 10.11998,-0.85554 11.96142,-5.65467 -1.20416,-1.59999 -3.44065,-2.18228 -5.75388,-2.05938 z m 67.337144,0.28459 c -5.12666,4.59861 0.57478,9.26409 5.6279,6.29304 1.12627,-1.14296 -0.03,-5.15007 -5.6279,-6.29304 z"
     style="stroke-width:1" /><path
     id="path5865"
     style="fill:#ff0000;fill-opacity:1;stroke:none;stroke-width:1"
     d="m 144.28593,0.02234773 c -4.72846,-0.130241 -9.22629,0.305612 -12.69456,1.39114097 -11.42013,3.574337 -22.42761,13.3504623 -29.08244,25.3273123 0.79734,0.507006 1.55397,1.092231 2.25149,1.761905 l 2.73316,2.793377 c 0.50085,-0.9661 1.02803,-1.91855 1.58128,-2.855169 1.65963,-2.810295 3.55872,-5.474423 5.72617,-7.919048 0.2717,-0.311234 0.58505,-0.655119 0.83818,-0.926899 3.88246,-4.155172 8.41169,-7.774782 13.55173,-10.2497593 3.001,-1.518808 6.29164,-2.427351 9.64291,-2.696721 0.83356,-0.07421 1.57797,-0.113164 2.35607,-0.134678 1.72128,-0.0399 3.44434,-0.01029 5.16212,0.109327 5.01613,0.391431 10.06346,1.236974 14.73531,3.165716 7.37287,3.3188363 13.68219,9.1226853 17.31321,16.3768003 0.24964,0.488785 0.54785,1.132589 0.72725,1.536909 0.62525,1.40926 1.15739,2.854792 1.60029,4.327112 0.44291,1.47232 0.79693,2.97113 1.06792,4.48556 0.54197,3.02886 0.7502,6.12133 0.66705,9.19293 -0.0493,1.99336 -0.22159,4.11767 -0.49752,6.16824 -0.11759,0.86622 -0.27284,1.85778 -0.41353,2.63651 -0.38767,2.14831 -0.88378,4.27608 -1.47354,6.37738 -0.58976,2.10131 -1.27316,4.17618 -2.03601,6.22052 -2.86637,7.62406 -6.75923,14.88577 -11.0499,21.72747 -2.59163,4.13195 -5.47015,8.17976 -8.29139,12.087707 -2.96288,4.0665 -6.0081,8.07161 -9.06776,12.06552 1.3127,0.81894 2.36808,1.97847 2.90428,3.53015 0,2.03345 -3.75098,2.74629 -7.6988,2.72365 -1.78027,2.30122 -3.54674,4.61455 -5.31106,6.92876 0.19882,0.79012 0.10838,1.48643 -0.26143,1.86173 -0.5674,0.33361 -1.14212,0.55788 -1.70962,0.70983 -8.20297,10.83454 -16.16672,21.85168 -23.53531,33.27329 -7.03364,10.96562 -13.70315,22.23362 -18.804164,34.24615 -0.16626,-0.0929 -0.34304,-0.79314 -0.51811,-1.12179 -5.55682,-13.54876 -13.39307,-26.0005 -21.56268,-38.09951 -7.84211,-11.57597 -16.09776,-22.86799 -24.39566,-34.12097 -9.26092,-12.52738 -18.73278,-24.921787 -27.21598,-37.999677 -3.914105,-6.14166 -7.704492,-12.40808 -10.56664,-19.12106 -1.3742506,-3.18332 -2.4902906,-6.49322 -3.2623666,-9.87741 -0.386038,-1.6921 -0.685379,-3.40308 -0.888873,-5.12568 -0.203493,-1.7226 -0.310936,-3.457 -0.310551,-5.19697 -0.0061,-0.62615 0.0157,-1.40013 0.03644,-1.9251 0.06642,-1.63292 0.229183,-3.263 0.488009,-4.87849 0.776477,-4.84647 2.420325,-9.55597 4.9434606,-13.771977 0.232974,-0.406964 0.592155,-0.959245 0.774792,-1.259629 2.81485,-4.365715 6.475555,-8.185829 10.729849,-11.167154 5.10266,-3.7545943 11.39509,-5.6432323 17.67921,-5.9749333 1.35102,-0.08003 2.76147,-0.107572 4.17818,-0.08239 0.53481,0.007 1.23547,0.04207 1.66682,0.06338 5.52687,0.340474 11.01152,1.776355 15.90306,4.3936603 0.52131,0.273191 1.16507,0.645747 1.58603,0.892041 2.58917,1.552829 4.993,3.406733 7.18702,5.479003 2.63436,2.47679 5.10078,5.475378 7.15693,8.559153 1.10846,1.601669 2.05569,3.296966 2.95974,5.016346 l 2.38776,-2.443207 c 0.77618,-0.794434 1.64299,-1.459355 2.56521,-2.023333 -9.72178,-17.1380263 -24.4937,-26.43959327 -42.35849,-26.43959327 -11.95026,0 -20.67577,3.23741897 -29.076107,10.79005527 C 2.8112714,22.062196 -2.4137766,38.573663 1.0443884,55.897713 c 2.847912,14.26698 11.5499756,29.39544 34.8989276,60.676227 38.28606,51.29213 49.23489,68.94236 56.30476,90.75687 1.32187,4.07865 2.59798,7.41519 2.83456,7.41519 0.2366,0 1.52426,-3.33654 2.86151,-7.41519 6.500704,-19.82757 22.920534,-46.56861 50.163454,-81.69544 19.48798,-25.1277 25.35836,-33.710357 31.67776,-46.302167 16.07981,-32.04012 10.76408,-61.05164 -13.61987,-74.3230303 -5.47506,-2.979915 -13.99882,-4.77075697 -21.87956,-4.98782497 z M 88.866866,30.519703 c -0.5147,0.35092 -1.00521,0.74814 -1.45293,1.20575 0.44797,-0.45787 0.94259,-0.84674 1.45769,-1.19783 -0.002,-0.002 -0.003,-0.005 -0.005,-0.008 z m -1.45293,1.20575 c -0.86947,0.8888 -2.32187,2.32285 -3.46993,3.46518 0.002,0.003 0.003,0.007 0.005,0.0111 1.31438,-1.30654 2.49252,-2.482 3.46518,-3.47627 z m 13.169894,-1.20575 c -8.1e-4,0.002 -0.002,0.006 -0.003,0.008 0.52072,0.35134 1.0168,0.7432 1.46561,1.19784 -0.44906,-0.4549 -0.94138,-0.85431 -1.46244,-1.20576 z" /><path
     id="path9"
     style="fill:#ffffff;stroke:none;stroke-width:1"
     d="m 141.18975,6.5138757 c -0.7781,0.02151 -1.52191,0.06056 -2.35546,0.134766 -3.35128,0.26937 -6.64159,1.178458 -9.64258,2.697265 -5.14005,2.4749783 -9.67027,6.0948293 -13.55274,10.2500003 -0.25313,0.27178 -0.56619,0.614547 -0.83789,0.925782 -2.88994,3.259499 -5.30312,6.910191 -7.30664,10.775394 l 43.80274,44.77343 c 18.49799,18.49798 -20.48636,22.78595 -31.76563,29.373047 -3.92685,4.00706 12.07145,6.68104 10.42383,11.61719 -3.33533,9.98924 -12.41154,3.64213 -22.16016,13.61133 -3.92016,4.00705 7.49831,3.63022 3.57813,7.64062 -7.3992,5.41405 -22.528484,9.18274 -23.738284,2.57227 -1.69774,-9.25067 -10.76342,-5.45388 -14.6836,-9.46094 -3.92015,-4.00707 8.02368,-8.25857 4.10352,-12.26563 -3.92686,-4.00706 -23.71266,-7.7195 -27.63281,-11.72656 -3.92018,-4.01041 15.02562,-6.96755 11.10546,-10.974607 -10.92835,-5.4107 -36.41936,-3.22435 -21.25,-22.00976 l 42.50782,-43.50196 c -0.90405,-1.71937 -1.85053,-3.413954 -2.95899,-5.015621 -2.05615,-3.083781 -4.52189,-6.081804 -7.15625,-8.558594 -2.19403,-2.07227 -4.59833,-3.92764 -7.1875,-5.480469 -0.42096,-0.246295 -1.06463,-0.617434 -1.58593,-0.890625 -4.89154,-2.6173043 -10.37744,-4.0540573 -15.9043,-4.3945313 -0.43136,-0.0213 -1.13121,-0.05552 -1.66602,-0.0625 -1.41671,-0.02518 -2.82671,0.002 -4.17773,0.08203 -6.28412,0.331702 -12.57702,2.220015 -17.67969,5.9746103 -4.254288,2.981324 -7.915617,6.802253 -10.730468,11.167968 -0.182636,0.300376 -0.540463,0.850849 -0.773438,1.257813 -3.3641796,5.621338 -5.1659816,12.118678 -5.4316396,18.650388 -0.02074,0.52497 -0.04322,1.29963 -0.03711,1.92578 -0.0015,6.95987 1.712436,13.83451 4.4609376,20.20118 2.862148,6.71297 6.654251,12.97944 10.568358,19.12109 8.4832,13.07789 17.95392,25.470658 27.21484,37.998048 8.29791,11.25296 16.55439,22.54512 24.39649,34.12109 8.16961,12.09901 16.00568,24.55084 21.5625,38.09961 0.17507,0.32864 0.35132,1.0302 0.51758,1.12305 5.101014,-12.01252 11.771044,-23.28047 18.804694,-34.2461 7.36858,-11.42162 15.33218,-22.43889 23.53515,-33.27343 -4.48649,1.20125 -8.46895,-2.92167 -3.91797,-7.00391 3.75978,0.76767 5.482,2.81549 5.88867,4.43164 1.76432,-2.31423 3.53028,-4.62846 5.31055,-6.92969 -4.42203,-0.0254 -9.09375,-0.9794 -9.09375,-2.18359 0.99258,-3.49742 4.593,-5.36253 8.24414,-5.48828 2.01484,-0.0694 4.02815,0.41154 5.64453,1.41992 3.05966,-3.99391 6.10549,-7.9999 9.06836,-12.06641 2.82124,-3.907938 5.69939,-7.955928 8.29102,-12.087888 4.29067,-6.84169 8.1844,-14.1025 11.05078,-21.72656 1.5257,-4.0887 2.73249,-8.30102 3.50781,-12.59766 0.14069,-0.77872 0.29647,-1.7705 0.41406,-2.63672 0.27593,-2.05056 0.44872,-4.17656 0.49805,-6.16992 0.16629,-6.14321 -0.83493,-12.36684 -3.33594,-18.003904 -0.1794,-0.404319 -0.47692,-1.048325 -0.72656,-1.537109 -3.63102,-7.254108 -9.93964,-13.058117 -17.3125,-16.3769533 -4.67185,-1.928742 -9.72019,-2.774584 -14.73633,-3.166016 -1.71778,-0.11962 -3.44083,-0.149273 -5.16211,-0.109374 z M 94.760066,28.754111 c -2.68487,-0.0142 -5.38062,0.962182 -7.34571,2.970702 -0.97265,0.99428 -2.15045,2.17003 -3.46484,3.47656 -0.002,-0.003 -0.004,-0.008 -0.006,-0.0117 -1.15302,1.14726 -2.51569,2.5164 -3.80664,3.80469 -0.24002,0.23946 -0.45731,0.45533 -0.70117,0.69922 -1.01652,1.01698 -1.96849,1.98742 -3.03321,3.07031 -2.12849,2.16165 -4.28482,4.3795 -6.36328,6.62305 -0.44867,0.44866 -0.83511,0.91977 -1.1582,1.40039 -0.32309,0.48062 -0.58347,0.97158 -0.7832,1.45899 -0.19974,0.48742 -0.33742,0.97234 -0.41602,1.4414 -0.0786,0.46906 -0.0989,0.92211 -0.0586,1.34766 0.0403,0.42555 0.13986,0.8228 0.29687,1.17968 0.15701,0.3569 0.3711,0.67247 0.64258,0.93555 0.27149,0.26309 0.60064,0.47502 0.98438,0.61914 0.38375,0.14411 0.82261,0.22071 1.3164,0.22071 h 9.69336 l 6.33985,-10.96875 3.90624,15.71679 11.800794,-7.45508 7.36914,3.88868 1.73437,-10.44532 8.82031,7.05274 c 0.23561,-0.23979 0.41317,-0.62706 0.52149,-1.10156 0.10833,-0.47451 0.14705,-1.03466 0.10351,-1.61914 -0.0653,-0.87675 -0.31674,-1.80862 -0.79296,-2.58204 -0.15875,-0.25781 -0.3422,-0.49775 -0.55274,-0.71289 l -14.20312,-14.42578 -3.5586,-3.61328 c -1.92667,-1.95172 -4.600274,-2.956506 -7.285154,-2.970702 z m -0.26172,2.214842 a 5.3974862,5.3974862 0 0 1 5.39844,5.39844 5.3974862,5.3974862 0 0 1 -5.39844,5.39648 5.3974862,5.3974862 0 0 1 -5.39649,-5.39648 5.3974862,5.3974862 0 0 1 5.39649,-5.39844 z m -21.07032,67.97266 c -0.36553,0 -0.61725,0.0388 -0.76757,0.10742 -0.15033,0.0686 -0.19994,0.16744 -0.15821,0.29492 0.0417,0.12749 0.17415,0.28249 0.38477,0.45899 0.21062,0.17651 0.49912,0.374117 0.85547,0.589837 0.71269,0.43143 1.6949,0.93157 2.85156,1.46094 1.15665,0.52937 2.48895,1.08793 3.9043,1.63672 1.41535,0.54879 2.91357,1.08844 4.40234,1.57812 1.48877,0.48969 2.96879,0.93114 4.3457,1.2832 1.37691,0.35206 2.65069,0.61409 3.73047,0.75 0.53989,0.068 1.03202,0.10432 1.46289,0.10352 0.43087,-7.9e-4 0.80092,-0.0378 1.09961,-0.11719 0.52971,-0.26736 0.99496,-0.56718 1.3711,-0.87109 0.37613,-0.30391 0.66333,-0.61144 0.83593,-0.89649 0.0863,-0.14251 0.14388,-0.28078 0.16993,-0.4082 0.026,-0.12741 0.0209,-0.24423 -0.0195,-0.34961 -0.0404,-0.10538 -0.11728,-0.19898 -0.23047,-0.27539 -0.11318,-0.0764 -0.26291,-0.13526 -0.45508,-0.17578 -2.21742,-0.36762 -7.86419,-1.47498 -13.10547,-2.58203 -3.93097,-0.83029 -7.63304,-1.660827 -9.49219,-2.181637 -0.61972,-0.1736 -1.03558,-0.31309 -1.18555,-0.40625 z m -7.12695,22.515617 c 2.31321,-0.12289 4.54975,0.46057 5.75391,2.06055 -1.84143,4.79912 -7.98395,9.09321 -11.96094,5.6543 -4.34252,-3.76123 1.11793,-7.44449 6.20703,-7.71485 z" /></svg>
`;

const App = (() => {
  const { scene, camera, controls } = setupScene(document.querySelector('#sceneContainer'));
  var state = {
    scene,
    camera,
    controls,
  };

  const fitCamera = () => {
    const boundingBox = new THREE.Box3().setFromObject(state.extrusions);
    const center = boundingBox.getCenter(new THREE.Vector3());
    const size = boundingBox.getSize(new THREE.Vector3());
    const offset = 0.5;
    const maxDim = Math.max(size.x, size.y, size.z);
    const fov = camera.fov * (Math.PI / 180);
    const cameraZ = Math.abs((maxDim / 4) * Math.tan(fov * 2)) * offset;
    const minZ = boundingBox.min.z;
    const cameraToFarEdge = minZ < 0 ? -minZ + cameraZ : cameraZ - minZ;

    state.controls.target = center;
    state.controls.maxDistance = cameraToFarEdge * 2;
    state.controls.minDistance = cameraToFarEdge * 0.5;
    state.controls.saveState();
    state.camera.position.z = cameraZ;
    state.camera.far = cameraToFarEdge * 3;
    state.camera.updateProjectionMatrix();
  };

  const loadSvg = (svgData) => {
    const { object, update, byColor } = renderSVG(svgData);
    while (state.scene.children.length > 0) {
      state.scene.remove(state.scene.children[0]);
    }
    state.extrusions = object;
    state.scene.add(object);
    state.sceneUpdate = update;
    state.byColor = byColor;
  };

  const renderDepthInputs = () => {
    const depthsContainer = document.querySelector('#depths');
    depthsContainer.innerHTML = '';
    for (const [color, colorShapeData] of state.byColor) {
      const item = document.createElement('li');
      const label = document.createElement('label');
      const swatch = document.createElement('span');
      const input = document.createElement('input');
      label.innerHTML = color;
      label.setAttribute('for', color);
      swatch.setAttribute('style', `background-color: #${color}`);
      input.setAttribute('type', 'number');
      input.setAttribute('step', '0.1');
      input.setAttribute('id', color);
      input.value = colorShapeData[0].depth;
      input.addEventListener('input', (event) => {
        state.sceneUpdate(Number(event.currentTarget.value), color);
      });

      item.appendChild(label);
      item.appendChild(swatch);
      item.appendChild(input);
      depthsContainer.appendChild(item);
    }
  };

  const download = () => {
    const exporter = new STLExporter();
    const zip = new JSZip();
    for (const [color, colorShapeData] of state.byColor) {
      const scene = new THREE.Scene();
      colorShapeData.forEach((data) => {
        scene.add(data.mesh);
      });
      const result = exporter.parse(scene, { binary: false });
      zip.file(`${color}.stl`, result);
    }
    zip
      .generateAsync({
        type: 'blob',
      })
      .then(function (content) {
        saveAs(content, 'svg2solid.zip');
      });
  };

  return {
    loadSvg,
    fitCamera,
    renderDepthInputs,
    download,
  };
})();

App.loadSvg(exampleSvgData);
App.renderDepthInputs();
App.fitCamera();

const svgFileInput = document.querySelector('#svgFile');
const downloadButton = document.querySelector('#download');

svgFileInput.addEventListener('change', function (event) {
  var reader = new FileReader();
  reader.onload = function (event) {
    App.loadSvg(event.target.result);
    App.renderDepthInputs();
    App.fitCamera();
  };
  reader.readAsText(event.target.files[0]);
});

downloadButton.addEventListener('click', () => {
  App.download();
});
